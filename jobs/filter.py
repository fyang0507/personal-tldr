"""
[GENERATED BY CURSOR]
This script filters raw results by comparing with the current.json file.
It identifies new entries and exports them to a filtered_results file with today's date.
"""

import json
from datetime import datetime
import os
from loguru import logger


def main():
    # Get today's date in the format YYYY-MM-DD
    today = datetime.now().strftime("%Y-%m-%d")
    
    # Define file paths
    raw_results_path = f"data/raw_results_{today}.json"
    current_path = "data/current.json"
    filtered_results_path = f"data/filtered_results_{today}.json"
    
    # Check if raw results file exists
    if not os.path.exists(raw_results_path):
        print(f"Error: {raw_results_path} does not exist.")
        return
    
    # Check if current.json exists
    if not os.path.exists(current_path):
        print(f"Error: {current_path} does not exist.")
        return
    
    # Load raw results
    with open(raw_results_path, 'r', encoding='utf-8') as f:
        raw_results = json.load(f)
    
    # Load current entries
    with open(current_path, 'r', encoding='utf-8') as f:
        current_entries = json.load(f)
    
    # Create a set of (channel, published_at) tuples from current entries for efficient lookup
    current_set = {(entry['channel'], entry['published_at']) for entry in current_entries}
    
    # Filter raw results to keep only new entries
    filtered_results = []
    for item in raw_results:
        channel = item['channel']
        published_at = item['data']['published_at']
        
        # Check if this entry is not in current_entries
        if (channel, published_at) not in current_set:
            filtered_results.append(item)
            # Add the new entry to current_entries
            current_entries.append({
                'channel': channel,
                'published_at': published_at
            })
            logger.info(f"Adding {channel} on {published_at}")
        else:
            logger.info(f"Skipping {channel} on {published_at} because it already exists")
    
    # Write filtered results to a new file
    with open(filtered_results_path, 'w', encoding='utf-8') as f:
        json.dump(filtered_results, f, ensure_ascii=False, indent=2)

    # Update current.json with the new entries
    with open(current_path, 'w', encoding='utf-8') as f:
        json.dump(current_entries, f, ensure_ascii=False, indent=2)
    
    print(f"Filtered {len(filtered_results)} new entries out of {len(raw_results)} total.")
    print(f"Results saved to {filtered_results_path}")

if __name__ == "__main__":
    main()
