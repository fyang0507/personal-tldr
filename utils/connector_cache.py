"""
[GENERATED BY CURSOR]
Module for caching API responses to avoid redundant calls between check and retrieve phases.
"""

import json
import os
from datetime import datetime
from pathlib import Path
from utils.logging_config import logger

class ConnectorCache:
    """Cache for temporarily storing API responses between workflow phases."""
    
    def __init__(self):
        self.cache_dir = Path("data/cache")
        self.cache_dir.mkdir(parents=True, exist_ok=True)
    
    def get_cache_path(self, connector_type, identifier):
        """Generate a cache file path based on connector type and identifier."""
        date_str = datetime.now().strftime("%Y-%m-%d")
        return self.cache_dir / f"{connector_type}_{identifier}_{date_str}.json"
    
    def save(self, connector_type, identifier, data):
        """Save data to cache."""
        try:
            cache_path = self.get_cache_path(connector_type, identifier)
            with open(cache_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"Error saving to cache: {e}")
            return False
    
    def load(self, connector_type, identifier):
        """Load data from cache if it exists."""
        try:
            cache_path = self.get_cache_path(connector_type, identifier)
            if cache_path.exists():
                with open(cache_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return None
        except Exception as e:
            logger.error(f"Error loading from cache: {e}")
            return None
    
    def clear_old_cache(self, days=1):
        """Clear cache files older than specified days."""
        try:
            for cache_file in self.cache_dir.glob("*.json"):
                file_time = datetime.fromtimestamp(os.path.getmtime(cache_file))
                if (datetime.now() - file_time).days >= days:
                    cache_file.unlink()
        except Exception as e:
            logger.error(f"Error clearing old cache: {e}") 