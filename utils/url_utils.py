"""
[GENERATED BY CURSOR]
Utility functions for URL manipulation.
"""
from urllib.parse import urlparse
from typing import Optional

def extract_base_url(url: str) -> Optional[str]:
    """
    Extracts the base URL (scheme and netloc) from a given URL.

    For example, if the input is 'http://example.com/path/to/page?query=string#fragment',
    the output will be 'https://example.com'.

    Args:
        url: The input URL string.

    Returns:
        Optional[str]: The base URL string (e.g., 'https://example.com').
                       Returns None if the URL is invalid, empty, or cannot be parsed.
    """
    if not url:
        return None
    try:
        parsed_url = urlparse(url)
        if parsed_url.scheme and parsed_url.netloc:
            return f"{parsed_url.scheme}://{parsed_url.netloc}"
        return None
    except ValueError:
        # Handle cases where urlparse might fail, though it's generally robust
        return None

if __name__ == '__main__':
    # Placeholder for testing
    test_urls = [
        "https://36kr.com/p/3265228187942663",
        "http://example.com/path/to/page?query=string#fragment",
        "ftp://ftp.example.com/resource",
        "//example.com/no_scheme", # urlparse will handle this by inheriting scheme if used in a browser context, but here we require one
        "example.com/no_scheme_at_all",
        "invalid-url",
        None,
        ""
    ]
    for t_url in test_urls:
        print(f"Original: {t_url}, Base URL: {extract_base_url(t_url)}") 