"""
[GENERATED BY CURSOR]
This module contains utility functions for text processing.
"""

from utils.logging_config import logger # Assuming logger might be needed in the future, or for consistency.

def parse_bullet_points(text: str) -> list[str]:
    """
    Parse a string containing bullet points into a list.
    Only lines starting with '-' or '*' are considered bullet points.
    
    Args:
        text (str): Text potentially containing bullet points.
        
    Returns:
        list: List of extracted bullet point strings, with markers and leading/trailing whitespace removed.
              Returns an empty list if no bullet points are found or if input is empty.
    """
    if not text:
        return []
    
    stripped_input_text = text.strip()
    
    if not stripped_input_text:
        return []
    
    bullet_points = []
    lines = stripped_input_text.split('\n')
    
    for line_content in lines:
        processed_line = line_content.strip()
        # Check if the line starts with a bullet point marker
        if processed_line.startswith('-') or processed_line.startswith('*'):
            # Extract content after the marker
            point_content = processed_line[1:].strip()
            # Add to list only if there's actual content
            if point_content:
                bullet_points.append(point_content)
    
    # Log a warning if input text was provided but no bullet points were parsed
    if not bullet_points and lines: # 'lines' will be non-empty if stripped_input_text was non-empty
        logger.warning(
            f"Input text provided but no bullet points were parsed. "
            f"Input (first 100 chars): '{stripped_input_text[:100]}...'"
        )
            
    return bullet_points 