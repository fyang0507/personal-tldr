"""
[GENERATED BY CURSOR]
This script loads raw data filtered by filter.py, processes it using OpenAI,
and publishes the summarized content to a Notion database.
"""

import os
from dotenv import load_dotenv
from loguru import logger
from preprocess import load_openai_client, process_data
from notion import create_database_entry
import json
from datetime import datetime
import pathlib

def load_environment():
    """
    Load and validate all required environment variables for publishing.

    Returns:
        dict: Dictionary containing all required environment variables.

    Raises:
        ValueError: If any required environment variable is missing.
    """
    load_dotenv()

    required_env_vars = {
        'NOTION_DATABASE_ID': os.getenv('NOTION_DATABASE_ID'),
        'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY'),
        # Add NOTION_API_KEY if it becomes separate
    }

    missing_vars = [var for var, value in required_env_vars.items() if not value]
    if missing_vars:
        raise ValueError(f"Missing required environment variables for publishing: {', '.join(missing_vars)}")

    return required_env_vars

def create_notion_blocks(processed_results):
    """Creates the list of blocks for the Notion page body."""
    children_blocks = []
    for result in processed_results:
        # Add a heading for each channel/podcast
        children_blocks.append({
            "object": "block",
            "type": "heading_3",
            "heading_3": {
                "rich_text": [{"type": "text", "text": {"content": f"{result['channel']} ({result['type']})"}}]
            }
        })

        # Add a toggle block with the title as the toggle text
        title = result['data'].get('title', 'Untitled')
        toggle_block = {
            "object": "block",
            "type": "toggle",
            "toggle": {
                "rich_text": [{"type": "text", "text": {"content": title}}],
                "children": []
            }
        }

        # Add published date to toggle children
        published_at = result['data'].get('published_at', 'Unknown date')
        # Ensure published_at is a string
        if isinstance(published_at, datetime):
            published_at_str = published_at.isoformat()
        elif not isinstance(published_at, str):
             published_at_str = str(published_at) # Fallback conversion
        else:
            published_at_str = published_at

        toggle_block["toggle"]["children"].append({
            "object": "block",
            "type": "bulleted_list_item",
            "bulleted_list_item": {
                "rich_text": [
                    {"type": "text", "text": {"content": f"Published: {published_at_str}"}}
                ]
            }
        })

        # Add summary as a sublist within toggle
        summary = result['data'].get('summary', 'No summary')
        summary_block = {
            "object": "block",
            "type": "bulleted_list_item",
            "bulleted_list_item": {
                "rich_text": [
                    {"type": "text", "text": {"content": "Summary:"}}
                ]
            }
        }

        # If summary is a list, add each item as a sub-bullet
        if isinstance(summary, list):
            summary_children = []
            for item in summary:
                summary_children.append({
                    "object": "block",
                    "type": "bulleted_list_item",
                    "bulleted_list_item": {
                        "rich_text": [
                            {"type": "text", "text": {"content": item}}
                        ],
                        "color": "default"
                    }
                })
            # Add summary children to the summary block
            if summary_children: # Only add children if there are any
                 summary_block["bulleted_list_item"]["children"] = summary_children

        # Add summary block to toggle children
        toggle_block["toggle"]["children"].append(summary_block)

        # Add URL to toggle children
        url = result['data'].get('url', 'No URL')
        if url and url != 'No URL': # Only add bookmark if URL exists
             toggle_block["toggle"]["children"].append({
                 "object": "block",
                 "type": "bookmark",
                 "bookmark": {
                     "url": url,
                     "caption": [],
                 }
             })
        else:
             toggle_block["toggle"]["children"].append({
                 "object": "block",
                 "type": "paragraph",
                 "paragraph": {
                     "rich_text": [{"type": "text", "text": {"content": "URL: Not available"}}]
                 }
             })

        # Add the complete toggle block to children_blocks
        children_blocks.append(toggle_block)

        # Add a divider between items
        children_blocks.append({
            "object": "block",
            "type": "divider",
            "divider": {}
        })

    # Add raw JSON data in a toggle block at the end
    # try:
    #     raw_data_json = json.dumps(processed_results, indent=2)
    #     children_blocks.append({
    #         "object": "block",
    #         "type": "heading_2",
    #         "heading_2": {"rich_text": [{"type": "text", "text": {"content": "Processed Data"}}]}
    #     })

    #     # Create a toggle for raw data
    #     raw_data_toggle = {
    #         "object": "block",
    #         "type": "toggle",
    #         "toggle": {
    #             "rich_text": [{"type": "text", "text": {"content": "Processed JSON Data"}}],
    #             "children": [{
    #                 "object": "block",
    #                 "type": "code",
    #                 "code": {
    #                     "rich_text": [{"type": "text", "text": {"content": raw_data_json}}],
    #                     "language": "json"
    #                 }
    #             }]
    #         }
    #     }
    #     children_blocks.append(raw_data_toggle)
    # except Exception as json_err:
    #      logger.error(f"Could not serialize processed data for Notion code block: {json_err}")

    return children_blocks

def main():
    """Main function to load data, process it, and publish to Notion."""
    try:
        # Load environment variables
        env_vars = load_environment()

        # --- Caching Logic for Processed Data ---
        cache_dir = pathlib.Path("data")
        cache_dir.mkdir(exist_ok=True) # Ensure data directory exists
        current_date_str = datetime.now().strftime("%Y-%m-%d")
        cache_file = cache_dir / f"filtered_results_{current_date_str}.json"

        if cache_file.exists():
            logger.info(f"Loading filtered results: {cache_file}")
            try:
                with open(cache_file, 'r') as f:
                    processed_results = json.load(f)
            except json.JSONDecodeError:
                logger.error(f"Error decoding cache file {cache_file}. Re-processing.")
                processed_results = None # Force reprocessing if cache is corrupt
            except IOError as e:
                 logger.error(f"Error reading cache file {cache_file}: {e}. Re-processing.")
                 processed_results = None
        else:
            logger.warning("No raw data found for today. Cannot proceed.")
            return


        # --- Send to Notion - create a single entry with multiple blocks --- 
        current_date_for_notion = datetime.now().strftime("%Y-%m-%d") # Use consistent date format
        combined_title = f"Daily Update - {current_date_for_notion}"

        # Create Notion properties for the single entry
        properties = {
            "Name": {
                "title": [
                    {
                        "text": {
                            "content": combined_title
                        }
                    }
                ]
            },
            "Status": {
                "status": {
                    "name": "Not started"
                }
            },
            "Date": {
                "date": {
                    "start": current_date_for_notion
                }
            }
        }

        # --- Create Notion block list --- 
        children_blocks = create_notion_blocks(processed_results)

        # Create single Notion entry with all blocks
        notion_db_id = env_vars['NOTION_DATABASE_ID']
        page = create_database_entry(notion_db_id, properties, children_blocks)

        if page and 'url' in page:
             logger.info(f"Successfully created combined Notion entry: {page['url']}")
        else:
             logger.error(f"Failed to create Notion entry. Response: {page}")

    except Exception as e:
        logger.exception(f"An unexpected error occurred during publishing: {str(e)}")
        # raise # Re-raise if needed for external monitoring

if __name__ == "__main__":
    main() 