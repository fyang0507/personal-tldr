"""
[GENERATED BY CURSOR]
This module provides GitHub Gist read and update functionalities.
It allows for retrieving data from and updating content to GitHub Gists.
"""

import json
import requests
from utils.logging_config import logger
import sys
import os
from dotenv import load_dotenv

def read_from_gist(gist_id, token, filename="current.json"):
    """
    Read data from a GitHub Gist.
    
    Args:
        gist_id (str): The ID of the GitHub Gist.
        token (str): GitHub token for authentication. Can be None for public gists.
        filename (str): The specific file to read from the gist.
        
    Returns:
        list/dict: The parsed JSON content from the gist file.
    """
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    response = requests.get(f"https://api.github.com/gists/{gist_id}", headers=headers)
    response.raise_for_status()
    gist_data = response.json()
    
    # Get specific file content from the gist
    if filename in gist_data["files"]:
        content = gist_data["files"][filename]["content"]
        return json.loads(content)
    else:
        logger.warning(f"File {filename} not found in gist. Returning empty list.")
        return []

def update_gist(gist_id, token, files_data):
    """
    Update a GitHub Gist with multiple files.
    
    Args:
        gist_id (str): The ID of the GitHub Gist.
        token (str): GitHub token for authentication.
        files_data (dict): A dictionary mapping filenames to file content.
            Format: {"filename.ext": {"content": "file content here"}}
            
    Returns:
        dict: The JSON response from the GitHub API.
    """
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    payload = {
        "files": files_data
    }
    
    response = requests.patch(f"https://api.github.com/gists/{gist_id}", headers=headers, json=payload)
    response.raise_for_status()
    return response.json() 

if __name__ == "__main__":
    # Load environment variables from .env file
    load_dotenv()
    
    # Get configuration from environment variables
    gist_id = os.getenv("GIST_ID")
    token = os.getenv("GIST_TOKEN")
    filename = os.getenv("GIST_FILENAME", "current.json")
    
    if not gist_id:
        logger.error("GIST_ID environment variable is required")
        sys.exit(1)
    
    if not token:
        logger.error("GIST_TOKEN environment variable is required")
        sys.exit(1)
        
    try:
        # Test 1: Read from gist
        logger.info(f"Test 1: Reading from gist {gist_id}...")
        data = read_from_gist(gist_id, token, filename)
        logger.info(f"Successfully read data from gist: {type(data)}")
        logger.info(f"Data preview: {json.dumps(data)[:100]}...")
        
        # Test 2: Update gist with the same content (no changes)
        logger.info(f"Test 2: Updating gist {gist_id} with same content...")
        # Convert data back to JSON string
        content = json.dumps(data, indent=2)
        files_data = {filename: {"content": content}}
        
        result = update_gist(gist_id, token, files_data)
        logger.info(f"Successfully updated gist with same content")
        
    except Exception as e:
        logger.error(f"Error during test: {str(e)}")
        sys.exit(1)
        
    logger.info("All tests completed successfully!") 