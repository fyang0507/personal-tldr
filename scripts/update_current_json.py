"""
[GENERATED BY CURSOR]
This script updates the current.json file in a GitHub Gist with a local version.

The script reads the local current.json file and updates the corresponding file in 
the specified GitHub Gist using the GitHub API.
"""

import os
import sys
import json
from dotenv import load_dotenv
from utils.logging_config import logger
import requests

def get_local_json_content(filepath):
    """
    Read the content of a local JSON file.
    
    Args:
        filepath (str): Path to the local JSON file.
        
    Returns:
        str: Content of the JSON file as a string.
    """
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return json.dumps(data, indent=2)
    except Exception as e:
        logger.error(f"Error reading local JSON file: {str(e)}")
        raise

def update_gist_file(gist_id, token, filename, content):
    """
    Update a file in a GitHub Gist with new content.
    
    Args:
        gist_id (str): The ID of the GitHub Gist.
        token (str): GitHub token for authentication.
        filename (str): The name of the file to update.
        content (str): The new content to put in the file.
            
    Returns:
        bool: True if successful, False otherwise.
    """
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    files_data = {
        filename: {"content": content}
    }
    
    payload = {
        "files": files_data
    }
    
    try:
        response = requests.patch(f"https://api.github.com/gists/{gist_id}", headers=headers, json=payload)
        response.raise_for_status()
        logger.info(f"Successfully updated file: {filename}")
        return True
    except Exception as e:
        logger.error(f"Error updating file {filename}: {str(e)}")
        return False

def main():
    # Load environment variables from .env file
    load_dotenv()
    
    # Get configuration from environment variables
    gist_id = os.getenv("GIST_ID")
    token = os.getenv("GIST_TOKEN")
    
    # Setting the local and remote file paths
    local_file_path = "data/current.json"
    remote_file_name = "current.json"
    
    if not gist_id:
        logger.error("GIST_ID environment variable is required")
        sys.exit(1)
    
    if not token:
        logger.error("GIST_TOKEN environment variable is required")
        sys.exit(1)
    
    try:
        # Read the local current.json file
        logger.info(f"Reading local file: {local_file_path}...")
        local_content = get_local_json_content(local_file_path)
        
        # Confirm operation
        logger.info(f"You are about to update the remote file {remote_file_name} with local content.")
        confirm = input("\nAre you sure you want to proceed? (yes/no): ")
        if confirm.lower() != 'yes':
            logger.info("Operation cancelled")
            return
        
        # Update the remote file
        logger.info(f"Updating remote file: {remote_file_name}...")
        success = update_gist_file(gist_id, token, remote_file_name, local_content)
        
        if success:
            logger.success(f"Successfully updated {remote_file_name} in the GitHub Gist")
        else:
            logger.error(f"Failed to update {remote_file_name}")
            
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 