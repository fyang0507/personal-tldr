"""
[GENERATED BY CURSOR]
Website Scrapers Module

This package provides different website scraping implementations and a unified
interface to access them. It includes a factory function `get_scraper`
to instantiate the appropriate scraper based on a type string.

Available Scrapers:
- Basic Scraper: Uses the `requests` library for simple HTTP GET requests.
  Suitable for static websites without sophisticated anti-bot measures.
- Playwright Scraper: Uses Playwright to control a headless browser, enabling
  the scraping of dynamic websites that rely heavily on JavaScript or employ
  anti-bot protections.

The primary entry point is the `get_scraper` function:

`get_scraper(scraper_type="basic") -> Optional[BaseScraper]`
  Returns an instance of the specified scraper type.

  Args:
    scraper_type (str, optional): The type of scraper to instantiate.
      Defaults to "basic". Valid options are "basic" or "playwright".

  Returns:
    Optional[BaseScraper]: An instance of the requested scraper,
                           or None if the type is invalid.

  Raises:
    ValueError: If an invalid `scraper_type` is provided.
"""

from typing import Optional
from .base import BaseScraper
from .basic_scraper import BasicScraper
from .playwright_scraper import PlaywrightScraper
from utils.logging_config import logger

_SCRAPER_REGISTRY = {
    "basic": BasicScraper,
    "playwright": PlaywrightScraper,
}

def get_scraper(scraper_type: str = "basic") -> Optional[BaseScraper]:
    """
    Factory function to get a scraper instance.

    Args:
        scraper_type (str): The type of scraper to instantiate ("basic" or "playwright").
                            Defaults to "basic".

    Returns:
        Optional[BaseScraper]: An instance of the requested scraper,
                               or None if the type is invalid.
    """
    scraper_class = _SCRAPER_REGISTRY.get(scraper_type.lower())
    if scraper_class:
        logger.info(f"Instantiating '{scraper_type}' scraper.")
        return scraper_class()
    else:
        logger.error(f"Invalid scraper_type: {scraper_type}. Available types: {list(_SCRAPER_REGISTRY.keys())}")
        return None
