"""
[GENERATED BY CURSOR]
Generic HTML Parser Module

This module provides a generic HTML parsing capability, primarily focused on converting
HTML content into Markdown. It is intended to be used as a fallback parser when
a site-specific parser is not available or for simple HTML structures.

This parser uses the `markdownify` library for HTML to Markdown conversion.
It currently does not attempt to extract specific structured data like titles
or publication dates from the HTML, treating the entire input as a single
block of content for conversion.
"""

from utils.logging_config import logger
from markdownify import markdownify
from typing import Optional, Dict
from .base import BaseParser

def _html_to_markdown(html_content: str) -> Optional[str]: # Return Optional[str]
    """
    Converts HTML content to Markdown using markdownify.
    """
    try:
        return markdownify(html_content)
    except Exception as e:
        logger.error(f"Error in HTML to Markdown conversion: {e}", exc_info=True)
        return None

class GenericParser(BaseParser):
    """
    A generic parser that converts HTML to Markdown.

    It uses the `markdownify` library for conversion and provides basic
    implementations for catalogue and content extraction.
    """

    def extract_catalogue(self, html_content: str, base_url: Optional[str] = None) -> Optional[str]: # Adjusted return type
        """
        Parses HTML content directly to Markdown.
        The `base_url` argument is ignored by this generic parser.

        Args:
            html_content: The HTML content to parse.
            base_url: The base URL (ignored).

        Returns:
            Optional[str]: Markdown content or None if an error occurs.
        """
        # base_url is unused in this implementation
        return _html_to_markdown(html_content)

    def extract_content(self, html_content: str) -> Optional[Dict[str, str]]:
        """
        Parses HTML content to Markdown and wraps it with a generic title.

        Args:
            html_content: The HTML content to parse.

        Returns:
            Optional[Dict[str, str]]: A dictionary with 'title' and 'content',
                                      or None if Markdown conversion fails.
        """
        markdown_content = _html_to_markdown(html_content)
        if markdown_content is None:
            return None
        return {
            'title': 'Untitled', # Generic title
            'content': markdown_content
        }
