"""
[GENERATED BY CURSOR]
Abstract base class for source connectors.
"""
import abc
from typing import Optional, Dict, Any

class SourceConnector(abc.ABC):
    """
    Abstract base class for all source connectors.
    It enforces the implementation of methods to check for updates
    and retrieve detailed information about those updates.
    """

    def __init__(self, source_identifier: str):
        """
        Initialize the source connector with a unique identifier.

        Args:
            source_identifier: A string that uniquely identifies the source (e.g., channel name, URL).
        """
        self.source_identifier = source_identifier

    def _generate_cache_key(self) -> str:
        """
        Generate a standardized cache key for the source data.
        The key is based on the source_identifier, normalized to lowercase,
        with leading '@' stripped and spaces replaced by underscores.
        """
        normalized_name = str(self.source_identifier).lstrip('@').lower().replace(' ', '_')
        return normalized_name

    @abc.abstractmethod
    async def check_latest_updates(self) -> None:
        """
        Asynchronously checks for the latest updates from the source and caches them.

        This method should identify new content or changes since the last check
        and save the relevant details to an internal cache accessible via the
        connector's cache key. It does not return any data.
        """
        pass

    @abc.abstractmethod
    async def get_latest_update_details(self) -> Optional[Dict[str, Any]]:
        """
        Asynchronously retrieves the detailed content for the latest update
        that was cached by check_latest_updates.

        This method should return the full content or a more detailed representation
        of the update retrieved from the cache using the connector's cache key.
        """
        pass 